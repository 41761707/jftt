%{
    #include <iostream>
    #include <string>
    #include <cmath>
    #include <climits>
    int yylex();
    void yyerror(const char *);
    std::string result = "";
    int n = 1234577;
    int field_property(int k, int n);
    int field_mult(int a, int b, int n);
    int field_pow(int a, int b, int n);
    int helper(int a, int n, int* x, int* y);
    int field_inverse(int a, int n);
    int field_div(int a, int b, int n);
    bool error = false;
%}

%token VAL POW COMMENT
%left '+' '-' INDMINUS
%left '*' '/'
%right '^'
%precedence NEG
%%
    input:
        %empty
    |   input line
    |   input error '\n' {result = "";}
    ;

    line:
        '\n'        {std::cout << std::endl;}
    |   exp '\n'    {if (!error)
                        std::cout << result << "\nWynik: " << $1 << "\n";
                     error = false;
                     result = "";
                    }
    ;

    exp:            
        VAL                 {int value = field_property($1, n); result += std::to_string(value) + " "; $$ = value;}
    |   '-' exp %prec NEG   {int value = field_property(-$2, n); result +="~ "; $$ = value;}
    |   POW                 {int value = field_property($1, n-1); result += std::to_string(value) + " "; $$ = value;}
    |   INDMINUS POW %prec NEG   {int value = field_property(-$2, n-1); result += std::to_string(value) + " "; $$ = value;}
    |   exp '+' exp         {result += "+ "; $$ = field_property($1 + $3, n);}
    |   exp '-' exp         {result += "- "; $$ = field_property($1 - $3, n);}
    |   exp '*' exp         {result += "* "; $$ = field_property($1 * $3, n);}
    |   exp '/' exp         {result += "/ "; if ($3 != 0) $$ = field_div($1, $3, n); else {yyerror("Blad"); error=true;}}
    |   exp '^' exp         {result += "^ "; $$ = field_pow($1, $3, n);}
    |   '(' exp ')'         {$$ = $2;}
    ;
%%

int field_property(int k, int n)
{
    return ((k % n) + n) % n;
}

int field_mult(int a, int b, int n)
{
    int result = 0;
    for (int i = 0; i < b; i++)
    {
        result = (result + (a % n)) % n; 
    }
    return result;
}

int field_pow(int a, int b, int n)
{
    int result = 1;
    for (int i = 0; i < b; i++)
        result = (result * a) % n;
    return result;
}

int helper(int a, int n, int* x, int* y)
{
    if (a == 0)
    {
        *x = 0;
        *y = 1;
        return n;
    }
    int prev_x, prev_y;
    int result = helper(n % a, a, &prev_x, &prev_y);
    *x = prev_y - (n / a) * prev_x;
    *y = prev_x;
    return result;
}

int field_inverse(int a, int n)
{
    int x, y;
    int res = helper(a, n, &x, &y);
    if (res != 1)
        return -1;
    return field_property(x, n);
}

int field_div(int a, int b, int n)
{
    int inv = field_inverse(b, n);
    if (inv != -1){
        return field_mult(a, inv, n);
    }
    return -1;
}

int main()
{
    return yyparse();
}

void yyerror(const char* err)
{
    std::cout << "Error: " << err << std::endl;
}