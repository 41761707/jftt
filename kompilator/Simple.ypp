%code requires
{
    #include <string>
    #include <vector>
}
%{
	#include <stdio.h>
	#include <stdlib.h>
	#include <string.h>
	#include <string>
	#include <fstream>
	#include "ST.hpp" 
	#include "SM.hpp" 
	#define YYDEBUG 1 
	extern int yylineno;
	void yyerror(char *s);
	int yylex();
	int parserErrors;
%}
%union sem_rec
{
	std::string *pidentifier;
    long long int num;
    struct variable *variable;
    struct condition *cond;
    std::vector<std::string> *command;
}
%start program
%token <num> num
%token <pidentifier> pidentifier
%token FOR
%token IF WHILE REPEAT DO 
%token VAR BEGINNER END
%token THEN ELSE ENDIF FROM TO DOWNTO ENDFOR ENDWHILE
%token UNTIL
%token READ WRITE       
%token LE GE LEQ GEQ EQ NEQ
%token PLUS MINUS TIMES DIV MOD
%token ASSIGN
%token ERROR 


%type <variable> value
%type <variable> identifier
%type <variable> expression
%type <cond> condition
%type <command> command
%type <command> commands


%left PLUS MINUS
%left TIMES DIV MOD

%%
program:
		VAR declarations BEGINNER {init_registers();}
		 commands END 				{halt();}		
		| BEGINNER 								{init_registers();}
		commands END   							{halt();}						
;
declarations:
		declarations ',' pidentifier						{init_var(*$3,yylineno);}
		|  declarations ',' pidentifier '[' num ':' num ']'	{init_array(*$3,$5,$7,yylineno);}
		|  pidentifier										{init_var(*$1,yylineno);}
		|  pidentifier '[' num ':' num ']'					{init_array(*$1,$3,$5,yylineno);}
;
commands:
		commands command 									
		| command 											
;
command: 
		identifier ASSIGN expression ';'					{assign($1,$3,yylineno);}
		|  IF condition THEN commands ENDIF                 {func_if();}
		|  IF condition THEN commands ELSE   				{func_else();}
		   commands ENDIF                                   {func_endif();}
		|  WHILE condition DO commands ENDWHILE				{func_while();}
		|  REPEAT 											{func_repeat();}
			commands UNTIL condition ';'					{func_until();}
		|  FOR pidentifier FROM value TO value DO {for_to(*$2,$4,$6,yylineno);}
		   commands ENDFOR									{endfor_to();}
		|  FOR pidentifier FROM value DOWNTO value DO {for_downto(*$2,$4,$6,yylineno);}
		   commands ENDFOR									{endfor_downto();}
		|  READ  identifier ';'								{read($2,yylineno);}
		|  WRITE value ';'									{write($2,yylineno);}
;
expression: 
		value												;
		|  value PLUS value									{func_plus($1, $3, yylineno);}
		|  value MINUS value								{func_minus($1,$3,yylineno);}
		|  value TIMES value								{func_times($1,$3,yylineno);}
		|  value DIV value									{func_div($1,$3,yylineno);}
		|  value MOD value  								{func_mod($1,$3,yylineno);}
;
condition:
		value EQ value		{condition_eq($1,$3,yylineno);}
		|  value NEQ value	{condition_neq($1,$3,yylineno);}
		|  value LE value	{condition_le($1,$3,yylineno);}
		|  value GE value   {condition_ge($1,$3,yylineno);}
		|  value LEQ value 	{condition_leq($1,$3,yylineno);}
		|  value GEQ value 	{condition_geq($1,$3,yylineno);}
;
value:
		num													{$$=func_num($1,yylineno);}
		|  identifier 										;
identifier: 
		pidentifier  										{$$ = func_pid(*$1, yylineno);}
		|  pidentifier '['pidentifier']' 					{$$ = func_pid_arr(*$1,*$3,yylineno);}
		|  pidentifier'['num']'         					{$$=func_pid(*$1,$3,yylineno);}
;
%%

int main( int argc, char *argv[] )
{ 
	extern FILE *yyin;
	++argv; --argc;
	std::ofstream outfile;
	yyin = fopen( argv[0], "r" );
	outfile.open (argv[1]);
	//yydebug = 1;
	parserErrors = 0;
	yyparse ();
	int sumErrors=parserErrors+tableErrors+codeErrors;
	if(sumErrors==0)
	{
		for(int i=0;i<command_list.size();i++)
		{
			outfile << command_list[i] << std::endl;
		}
		std::cout << "Kompilacja przeprowadzona pomyslnie" << std::endl;
	}
	fclose(yyin);
	outfile.close();
	return 0;
}

void yyerror(char *s)
{
	parserErrors++;
	std::cout << s << ", numer linii: " << yylineno << std::endl;
}